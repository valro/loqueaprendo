
#+TITLE: Lo que aprendo. elisp
#+AUTHOR: valro
#+DATE: 27/12/2019
;;#+STARTUP: showall 

------
* Org Mode


** [[http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/][WRAP TEXT IN AN ORG-MODE BLOCK]] 

In my most recent post on org-mode, I talked about using blocks to mark text as being latex, or source code and so on. I mentioned using the shortcuts like <e then TAB on a new line to create an empty block.
Sometimes it is handy to wrap existing text in a block, and the following function does that for the text you have selected.

This has been in my config file for ages and I can’t remember where it came from – I know I didn’t write it! 
A bit of googleing suggests this could be the origin, but if anyone knows different, let me know.

I bind the function to C-< because it reminds me of the < shortcuts to create the blocks, 
and I don’t use the org-cycle-agenda-files that is usually bound to that key combo.

#+BEGIN_SRC elisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; function to wrap blocks of text in org templates                       ;;
;; e.g. latex or src etc                                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun org-begin-template ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

;;bind to key
(define-key org-mode-map (kbd "C-<") 'org-begin-template)

#+END_SRC


** [[https://orgmode.org/worg/][Hello Oreg, The Org Mode Community]]


** org-capture

#+BEGIN_SRC elisp
;; C-c c is for capture, it's good enough for me
(define-key global-map "\C-cc" 'org-capture)
;; force UTF-8 
(setq org-export-coding-system 'utf-8)

#+END_SRC

#+RESULTS:
: utf-8

#+BEGIN_SRC elisp
;; This changes the default file location for our tasks from ~/.notes to an entry in our Dropbox folder. Why there? Install a copy of Orgzly on your phone, and point it to the notes folder in your Dropbox account, and you’ll find your new task shown there.  
(setq org-default-notes-file "~/Dropbox/notes/tasks.org")
;; leer como sincronizar con orgzly
#+END_SRC
If you wanted to divide tasks into personal and work. We will let the tasks.org file (defined above) contain our personal stuff, and work-related tasks will go into work.org: 
-----
#+BEGIN_SRC elisp
(add-to-list 'org-capture-templates
             '("w" "Work-related Task"  entry
               (file "~/Dropbox/notes/work.org")
               "* TODO %?" :empty-lines 1))

#+END_SRC

#+RESULTS:
| w | Work-related Task | entry | (file ~/Dropbox/notes/work.org) | * TODO %? | :empty-lines | 1 |

-----
Run org-capture, and we now have our new w template (but we lost our default). Type q and let’s configure org-capture to have both: 
-----
#+BEGIN_SRC elisp
(add-to-list 'org-capture-templates
             '("t" "Personal Task"  entry
               (file org-default-notes-file)
               "* TODO %?" :empty-lines 1))

#+END_SRC

#+RESULTS:
| t | Personal Task     | entry | (file org-default-notes-file)   | * TODO %? | :empty-lines | 1 |
| w | Work-related Task | entry | (file ~/Dropbox/notes/work.org) | * TODO %? | :empty-lines | 1 |

-----


** [[https://orgmode.org/manual/Evaluating-code-blocks.html][Evaluating code blogs]]

   C-c C-c
   C-c C-v e

   [[https://orgmode.org/manual/Languages.html#Languages][Languages Identifiers]]


* Raspberry home

** Conexión con ssh
   - abrir consola
   #+BEGIN_SRC 
   ssh pi@192.168.1.150
   #+END_SRC
   - introducir contraseña
   Password: ValGalSanddmmyy
** Visualizar página Tomcat
   - El servicio tomcat está activo por defecto
   - Introducir en Navegador web: 192.168.1.150:8080


* Linux Commands

** [[https://www.tecmint.com/list-all-running-services-under-systemd-in-linux/][Listing Running Services Under SystemD in Linux]]

   - Listing running services
   
     #+BEGIN_SRC sh

     systemctl
     systemctl | grep "tomcat"

     systemctl list-units --type=service
     systemctl --type=service

     systemctl list-units --type=service --state=active
     systemctl --type=service --state=active

     systemctl list-units --type=service --state=running 
     systemctl --type=service --state=running

   #+END_SRC

   - The port they use
     To determine the port a daemon process is listening on, you can use the netstat or ss tools as shown.
     Where the flag -l means print all listening sockets, -t displays all TCP connections, -u shows all UDP connections, -n means print numeric port numbers (instead of application names) and -p means show application name.
     
     #+BEGIN_SRC 
     netstat -ltup | grep "mysql"    
     #+END_SRC
   
   - firewall


** Linux Networking Commands 

*** [[https://geekflare.com/linux-networking-commands/][10 Useful Linux Networking Commands]]
    
    1. Ifconfig
    2. traceroute
    3. dig (Domain Information Groper)
    4. telnet
       #+BEGIN_SRC 
       telnet connect destination host:port via a telnet protocol if connection establishes means connectivity between two hosts is working fine.
       #+END_SRC
    5. nslookup
    6. netstat
    7. w
    8. nmap
    9. scp
    10. Enable/Disable Network Interface

*** [[https://haydenjames.io/linux-networking-commands-scripts/][Linux Networking commands and scripts]]

    This list of Linux Networking commands and scripts, will receive ongoing updates, similar to the other lists on [[https://haydenjames.io/linux-benchmark-scripts-tools/][this blog…]]
       

** [[https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je#intermediate][101 Bash Commands and Tips for Beginners to Experts - Andrew - Blog interesante - Jan 13 Updated on Sep 25, 2019 ・40 min read]]

   1. _ncdu_ ((NCurses Disk Usage) provides a navigable overview of file space usage, like an improved du. It opens a read-only vim-like window (press q to quit))
   2. _top_ / _htop_ 
      top displays all currently-running processes and their owners, memory usage, and more. htop is an improved, interactive top. (Note: you can pass the -u username flag to restrict the displayed processes to only those owner by username.)
   3. REPLs
      A REPL is a Read-Evaluate-Print Loop, similar to the command line, but usually used for particular programming languages.
      You can open the Python REPL with the python command (and quit with the quit() function):
   4. Environment Variables and Aliases
      
      *Environment variables* (sometimes shortened to "env vars") are persistent variables that can be created and used within your bash shell. They are defined with an equals sign (=) and used with a dollar sign ($). You can see all currently-defined env vars with _printenv_:
      
      *Aliases*
 

** [[https://www.howtogeek.com/413213/how-to-kill-processes-from-the-linux-terminal/][How to Kill Processes From the Linux Terminal]]
   
** [[http://xahlee.info/linux/linux_xmodmap_tutorial.html][xmodmap tutorial - xahlee.info]]

** Keyboard shortcut for moving window between monitors

   Super+Shift with arrow keys by default


** Knoppix 

*** [[https://www.wgdd.de/2013/08/create-knoppix-usb-boot-stick-from.html][Create a KNOPPIX USB (boot-)stick from a running Linux system ]]


** Copy Files and Directories

   =cp [options] source1 source2 [...] destination_directory=
   =cp -arf ~/DatosWin/CASA/* /media/valgalsan/Maxtor/CASA_DatosWin=


** I can't delete files 'rm: cannot remove X Read-only file system'

   Depending on the state of things, the output of mount may not reflect reality. 
   You're far better of with cat /proc/mounts, which is guaranteed to show you the actual mount table, 
   wherein you'll probably find that it's actually mounted read-only. You can fix this with mount -o remount,rw /mount/point


** [[https://linuxhandbook.com/anaconda-linux/][how to uninstall anaconda3]]

** [[https://www.oueta.com/linux/create-linux-and-unix-bootable-usb-flash-drive-in-linux-with-command-line/][Create Linux and Unix bootable USB flash drive in Linux with command line]]

   1. First, identify the USB drive
      
      #+BEGIN_SRC bash
      findmnt 
      #+END_SRC

      #+RESULTS:
      | TARGET                                             SOURCE      FSTYPE          OPTIONS |                                                          |                   |               |                   |               |                                                                  |              |                |
      | /                                                  /dev/sdb5   ext4            rw      | relatime                                                 | errors=remount-ro | data=ordered  |                   |               |                                                                  |              |                |
      | ├─/sys                                             sysfs       sysfs           rw      | nosuid                                                   | nodev             | noexec        | relatime          |               |                                                                  |              |                |
      | │ ├─/sys/kernel/security                           securityfs  securityfs      rw      | nosuid                                                   | nodev             | noexec        | relatime          |               |                                                                  |              |                |
      | │ ├─/sys/fs/cgroup                                 tmpfs       tmpfs           rw      | mode=755                                                 |                   |               |                   |               |                                                                  |              |                |
      | │ │ ├─/sys/fs/cgroup/systemd                       cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | xattr         | release_agent=/lib/systemd/systemd-cgroups-agent                 | name=systemd |                |
      | │ │ ├─/sys/fs/cgroup/net_cls                                                           | net_prio              cgroup      cgroup          rw     | nosuid            | nodev         | noexec            | relatime      | net_cls                                                          | net_prio     |                |
      | │ │ ├─/sys/fs/cgroup/freezer                       cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | freezer       |                                                                  |              |                |
      | │ │ ├─/sys/fs/cgroup/pids                          cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | pids          | release_agent=/run/cgmanager/agents/cgm-release-agent.pids       |              |                |
      | │ │ ├─/sys/fs/cgroup/cpu                                                               | cpuacct                   cgroup      cgroup          rw | nosuid            | nodev         | noexec            | relatime      | cpu                                                              | cpuacct      |                |
      | │ │ ├─/sys/fs/cgroup/devices                       cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | devices       |                                                                  |              |                |
      | │ │ ├─/sys/fs/cgroup/hugetlb                       cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | hugetlb       | release_agent=/run/cgmanager/agents/cgm-release-agent.hugetlb    |              |                |
      | │ │ ├─/sys/fs/cgroup/blkio                         cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | blkio         |                                                                  |              |                |
      | │ │ ├─/sys/fs/cgroup/memory                        cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | memory        |                                                                  |              |                |
      | │ │ ├─/sys/fs/cgroup/cpuset                        cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | cpuset        | clone_children                                                   |              |                |
      | │ │ └─/sys/fs/cgroup/perf_event                    cgroup      cgroup          rw      | nosuid                                                   | nodev             | noexec        | relatime          | perf_event    | release_agent=/run/cgmanager/agents/cgm-release-agent.perf_event |              |                |
      | │ ├─/sys/fs/pstore                                 pstore      pstore          rw      | nosuid                                                   | nodev             | noexec        | relatime          |               |                                                                  |              |                |
      | │ ├─/sys/fs/fuse/connections                       fusectl     fusectl         rw      | relatime                                                 |                   |               |                   |               |                                                                  |              |                |
      | │ └─/sys/kernel/debug                              debugfs     debugfs         rw      | relatime                                                 |                   |               |                   |               |                                                                  |              |                |
      | ├─/proc                                            proc        proc            rw      | nosuid                                                   | nodev             | noexec        | relatime          |               |                                                                  |              |                |
      | │ └─/proc/sys/fs/binfmt_misc                       systemd-1   autofs          rw      | relatime                                                 | fd=34             | pgrp=1        | timeout=0         | minproto=5    | maxproto=5                                                       | direct       | pipe_ino=13394 |
      | │   └─/proc/sys/fs/binfmt_misc                     binfmt_misc binfmt_misc     rw      | relatime                                                 |                   |               |                   |               |                                                                  |              |                |
      | ├─/dev                                             udev        devtmpfs        rw      | nosuid                                                   | relatime          | size=8169380k | nr_inodes=2042345 | mode=755      |                                                                  |              |                |
      | │ ├─/dev/pts                                       devpts      devpts          rw      | nosuid                                                   | noexec            | relatime      | gid=5             | mode=620      | ptmxmode=000                                                     |              |                |
      | │ ├─/dev/shm                                       tmpfs       tmpfs           rw      | nosuid                                                   | nodev             |               |                   |               |                                                                  |              |                |
      | │ ├─/dev/mqueue                                    mqueue      mqueue          rw      | relatime                                                 |                   |               |                   |               |                                                                  |              |                |
      | │ └─/dev/hugepages                                 hugetlbfs   hugetlbfs       rw      | relatime                                                 |                   |               |                   |               |                                                                  |              |                |
      | ├─/run                                             tmpfs       tmpfs           rw      | nosuid                                                   | noexec            | relatime      | size=1638572k     | mode=755      |                                                                  |              |                |
      | │ ├─/run/lock                                      tmpfs       tmpfs           rw      | nosuid                                                   | nodev             | noexec        | relatime          | size=5120k    |                                                                  |              |                |
      | │ ├─/run/cgmanager/fs                              cgmfs       tmpfs           rw      | relatime                                                 | size=100k         | mode=755      |                   |               |                                                                  |              |                |
      | │ ├─/run/user/1001                                 tmpfs       tmpfs           rw      | nosuid                                                   | nodev             | relatime      | size=1638572k     | mode=700      | uid=1001                                                         | gid=1001     |                |
      | │ └─/run/user/1000                                 tmpfs       tmpfs           rw      | nosuid                                                   | nodev             | relatime      | size=1638572k     | mode=700      | uid=1000                                                         | gid=1000     |                |
      | │   └─/run/user/1000/gvfs                          gvfsd-fuse  fuse.gvfsd-fuse rw      | nosuid                                                   | nodev             | relatime      | user_id=1000      | group_id=1000 |                                                                  |              |                |
      | ├─/home/valgalsan/DatosMint                        /dev/sda2   ext4            rw      | relatime                                                 | data=ordered      |               |                   |               |                                                                  |              |                |
      | ├─/home/valgalsan/DatosWin                         /dev/sda1   fuseblk         ro      | relatime                                                 | user_id=0         | group_id=0    | allow_other       | blksize=4096  |                                                                  |              |                |
      | ├─/snap/core/8213                                  /dev/loop0  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/snap/core/8268                                  /dev/loop1  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/snap/gtk-common-themes/1353                     /dev/loop2  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/snap/core18/1288                                /dev/loop3  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/snap/core18/1279                                /dev/loop4  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/snap/flameshot-app/188                          /dev/loop5  squashfs        ro      | nodev                                                    | relatime          |               |                   |               |                                                                  |              |                |
      | ├─/media/valgalsan/Linux Mint 19.3 Cinnamon 64-bit /dev/sde1   iso9660         ro      | nosuid                                                   | nodev             | relatime      | uid=1000          | gid=1000      | iocharset=utf8                                                   | mode=0400    | dmode=0500     |
      | └─/media/valgalsan/Maxtor                          /dev/sdc1   fuseblk         rw      | nosuid                                                   | nodev             | relatime      | user_id=0         | group_id=0    | default_permissions                                              | allow_other  | blksize=4096   |

      #+BEGIN_SRC sh 
      sudo fdisk -l /dev/sde1
      #+END_SRC

      #+RESULTS:

   2. Method 1 - using dd (Data Duplication)
      - Check if the file is an ISOHybrid image, it must contain an MBR while the ISO9660 doesn’t. You can use the file command or hexdump the first 512 bytes.
	- As you see the file command does not detect the MBR or hexdump shows just zeros, if you write this image it will not boot, it’s an ISO9660 image.
	  #+BEGIN_SRC sh
	  file /media/valgalsan/Maxtor/Downloads/rutracker/linuxmint-19.3-cinnamon-64bit.iso 
	 #+END_SRC

	 #+RESULTS:
	 | /media/valgalsan/Maxtor/Downloads/rutracker/linuxmint-19.3-cinnamon-64bit.iso: DOS/MBR boot sector ISO 9660 CD-ROM filesystem data (DOS/MBR boot sector) 'Linux Mint 19.3 Cinnamon 64-bit' (bootable); partition 2 : ID=0xef | start-CHS (0x3ff | 254 | 63) | end-CHS (0x3ff | 254 | 63) | startsector 680 | 4928 sectors |

	 #+BEGIN_SRC zsh
	 hexdump -n 512 /media/valgalsan/Maxtor/Downloads/rutracker/linuxmint-19.3-cinnamon-64bit.iso
	 #+END_SRC

	 #+RESULTS:
	 |       0 | 5245 |    8 | 0    | 9090 |    0 |    0 | 0    |    0 |
	 |      10 |    0 |    0 | 0    |    0 |    0 |    0 | 0    |    0 |
	 |      20 | ed33 | 8efa | bcd5 | 7c00 | fcfb | 3166 | 66db | c931 |
	 |      30 | 5366 | 5166 | 5706 | dd8e | c58e | be52 | 7c00 | 00bf |
	 |      40 | b906 |  100 | a5f3 | 4bea |    6 | 5200 | 41b4 | aabb |
	 |      50 | 3155 | 30c9 | f9f6 | 13cd | 1672 | fb81 | aa55 | 1075 |
	 |      60 | e183 | 7401 | 660b | 06c7 | 06f1 | 42b4 | 15eb | 00eb |
	 |      70 | 515a | 08b4 | 13cd | e183 | 5b3f | 0f51 | c6b6 | 5040 |
	 |      80 | e1f7 | 5253 | bb50 | 7c00 | 04b9 | 6600 | b0a1 | e807 |
	 |      90 |   44 | 820f | 80   | 4066 | c780 | e202 | 66f2 | 3e81 |
	 | 00000a0 | 7c40 | c0fb | 7078 |  975 | bcfa | 7bec | 44ea | 007c |
	 | 00000b0 | e800 |   83 | 7369 | 6c6f | 6e69 | 7875 | 622e | 6e69 |
	 | 00000c0 | 6d20 | 7369 | 6973 | 676e | 6f20 | 2072 | 6f63 | 7272 |
	 | 00000d0 | 7075 | 2e74 | 0a0d | 6066 | 3166 | 66d2 | 603  | 7bf8 |
	 | 00000e0 | 1366 | fc16 | 667b | 6652 |  650 | 6a53 | 6a01 | 8910 |
	 | 00000f0 | 66e6 | 36f7 | 7be8 | e4c0 | 8806 | 88e1 | 92c5 | 36f6 |
	 |     100 | 7bee | c688 | e108 | b841 |  201 | 168a | 7bf2 | 13cd |
	 |     110 | 648d | 6610 | c361 | 1ee8 | 4f00 | 6570 | 6172 | 6974 |
	 |     120 | 676e | 7320 | 7379 | 6574 | 206d | 6f6c | 6461 | 6520 |
	 |     130 | 7272 | 726f | 0d2e | 5e0a | b4ac | 8a0e | 623e | b304 |
	 |     140 | cd07 | 3c10 | 750a | cdf1 | f418 | fdeb | 0    |    0 |
	 |     150 |    0 |    0 | 0    |    0 |    0 |    0 | 0    |    0 |
	 |       * |      |      |      |      |      |      |      |      |
	 | 00001b0 | 15e8 |    0 | 0    |    0 | 4ac4 | 1dda | 0    |   80 |
	 | 00001c0 |    1 | 7900 | fae0 |    0 |    0 | b3c0 | 003c | fe00 |
	 | 00001d0 | ffff | feef | ffff | 02a8 |    0 | 1340 | 0    |    0 |
	 | 00001e0 |    0 |    0 | 0    |    0 |    0 |    0 | 0    |    0 |
	 | 00001f0 |    0 |    0 | 0    |    0 |    0 |    0 | 0    | aa55 |
	 |     200 |      |      |      |      |      |      |      |      |

	- The file command detected the MBR, this is what we need to use the dd command, it’s an ISOHybrid image.

      - Write the ISOHybrid image to the USB drive. All data on /dev/sdx will be destroyed!
	#+BEGIN_SRC sh
	dd if=/media/valgalsan/Maxtor/Downloads/rutracker/linuxmint-19.3-cinnamon-64bit.iso of=/dev/sdx bs=512 status=progress
	#+END_SR

   3. Method 2 - manually (MBR partitioning scheme)

      1. Install requirements: 

         - [[http://www.linuxfromscratch.org/blfs/view/svn/postlfs/dosfstools.html][dosfstools]]

	 - apt-get build-dep syslinux

      2. Delete partitions by clearing the Master Boot Record, the following command will write 0x00 to the first 512 bytes. All data on /dev/sdx will be destroyed!
	 #+BEGIN_SRC sh
	 dd if=/dev/zero of=/dev/sde bs=512 count=1
	 #+END_SRC





** [[https://linoxide.com/linux-command/list-mounted-drives-on-linux/][How to List Mounted Drives on Linux ]]

   1. Using cat command
      #+BEGIN_SRC sh
      cat /proc/mounts
      #+END_SRC
   2. Using mount command
      #+BEGIN_SRC sh
      mount
      #+END_SRC
      #+BEGIN_SRC sh
      mount -l
      #+END_SRC
   3. Using df command
      #+BEGIN_SRC sh
      df -aTh
      #+END_SRC
      #+BEGIN_SRC sh
      df -HP -t nfs
      #+END_SRC
   4. Using findmnt
      #+BEGIN_SRC sh
      findmnt --raw
      #+END_SRC
      #+BEGIN_SRC sh
      findmnt -t ext4
      #+END_SRC


** [[https://www.maketecheasier.com/check-hardware-information-linux/][How to Check Hardware Information on Linux Command Line]] 

   - Gathering Hardware Information on Linux Machine

     $ dmesg                       ==> Detected hardware and boot messages
    
     $ cat /proc/cpuinfo           ==> CPU model
     $ cat /proc/meminfo           ==> Hardware memory
     $ cat /proc/interrupts        ==> Lists the number of interrupts per CPU per I/O device
     $ lshw                        ==> Displays information on hardware configuration of the system
     $ lsblk                       ==> Displays block device reaalted inforamtion in Linux (sudo yum install util-linux-ng)
     $ free -m                     ==> Used and free memory (-m for MB)
     $ lspci -tv                   ==> Show PCI devices

   - lscpu
     The =lscpu= command gives you information about the CPU and processing units. It does not have any other options or functionality.

   - lspci
     The =lspci= is another command line tool that lists all the PCI buses and details about the devices connected to them like VGA adapter, graphics card, network adapter, usb ports, SATA controller, etc.
     You can also filter out specific device information by running the following command: 
     #+BEGIN_SRC sh

     lspci -v | grep "VGA" -A 12
     
     #+END_SRC

     #+RESULTS:
     | 01:00.0 | VGA           | compatible | controller: | NVIDIA      | Corporation       | GF108       | [GeForce    | GT    | 730]       | (rev | a1) | (prog-if | 0 | [VGA | controller]) |
     |         | Subsystem:    | Gigabyte   | Technology  | Co.,        | Ltd               | GF108       | [GeForce    | GT    | 730]       |      |     |          |   |      |              |
     |         | Flags:        | bus        | master,     | fast        | devsel,           | latency     | 0,          | IRQ   | 30         |      |     |          |   |      |              |
     |         | Memory        | at         | f6000000    | (32-bit,    | non-prefetchable) | [size=16M]  |             |       |            |      |     |          |   |      |              |
     |         | Memory        | at         | e8000000    | (64-bit,    | prefetchable)     | [size=128M] |             |       |            |      |     |          |   |      |              |
     |         | Memory        | at         | f0000000    | (64-bit,    | prefetchable)     | [size=32M]  |             |       |            |      |     |          |   |      |              |
     |         | I/O           | ports      | at          | e000        | [size=128]        |             |             |       |            |      |     |          |   |      |              |
     |         | [virtual]     | Expansion  | ROM         | at          | 000c0000          | [disabled]  | [size=128K] |       |            |      |     |          |   |      |              |
     |         | Capabilities: | <access    | denied>     |             |                   |             |             |       |            |      |     |          |   |      |              |
     |         | Kernel        | driver     | in          | use:        | nvidia            |             |             |       |            |      |     |          |   |      |              |
     |         | Kernel        | modules:   | nvidiafb,   | nouveau,    | nvidia_384_drm,   | nvidia_384  |             |       |            |      |     |          |   |      |              |
     |         |               |            |             |             |                   |             |             |       |            |      |     |          |   |      |              |
     | 01:00.1 | Audio         | device:    | NVIDIA      | Corporation | GF108             | High        | Definition  | Audio | Controller | (rev | a1) |          |   |      |              |

   - lshw
     The lshw is a general purpose utility that reports detailed and brief information about multiple hardware units like CPU, memory, usb controller, disk, etc. Lshw extracts the information from different “/proc” files.
     #+BEGIN_SRC sh

     lshw -short
     
     #+END_SRC

   - lssci
     You can list all scsi/sata devices like hard drives and optical drives by running the following command:
     #+BEGIN_SRC sh

     lssci
     
     #+END_SRC

   - lsusb
     This command shows you the USB controllers and details about devices connected to them. By default, the =lsusb= command prints brief information. You can also use the verbose option -v to print detailed information about each usb port.

   - Inxi
     Inxi is a bash script that fetches hardware information from multiple sources and commands on the system and gives you goodlooking reports that non-technical users can read easily.

     By default, inxi is not installed in Ubuntu. You can install it by running the following command: =sudo apt-get install inxi=. After installing inxi, you can get hardware information by running the following command:
     #+BEGIN_SRC sh
     inxi -Fx
     #+END_SRC

   - df
     This command gives you brief information about various partitions, their mount points and the used and available space on each.
     You can run the df command with the -H parameter.
     #+BEGIN_SRC sh
     df -H
     #+END_SRC

   - free
     You can check the amount of used, free and total amount of RAM on your system with the free command.
     #+BEGIN_SRC sh
     free -m
     #+END_SRC

   - dmidecode
     The dmidecode command is different from all other commands. It extracts hardware information by reading data from the DMI tables.

     To display information about the processor, run:
     #+BEGIN_SRC sh
     sudo dmidecode -t processor
     #+END_SRC

     #+RESULTS:

     To display information about the memory, run:
     #+BEGIN_SRC sh
     sudo dmidecode -t memory
     #+END_SRC
     To display information about the bios, run:
     #+BEGIN_SRC sh
     sudo dmidecode -t bios
     #+END_SRC

   - hdparm
     The hdparm command gives you information about sata devices like hard disks.
     #+BEGIN_SRC sh
     sudo hdparmgg
     #+END_SRC
     

** How to Check Drive Space     
   [[https://www.techrepublic.com/article/how-to-check-drive-space-on-linux-from-the-command-line/][How to check drive space on Linux from the command line]]
   - df reports the amount of disk space used on a file system
   - du reports the amount of space used by specific files
   - btrfs reports the amount of space used by a btrfs file system mount point


** How do I change keyboards from the command line
   #+BEGIN_SRC sh
   # English to Sapanish and viceversa with Alt + Shift
   setxkbmap -option grp:alt_shift_toggle us,es
   #+END_SRC

   #+RESULTS:
   You can see all locale alias with
   #+BEGIN_SRC sh
   cat /etc/locale.alias
   #+END_SRC

   More info about setxkbmap in manual: man setxkbmap
   
   Information in how to set it on boot: [[https://wiki.gentoo.org/wiki/Keyboard_layout_switching][gentoo linux wiki -Keyboard layout switching/]]


** [[https://itsfoss.com/how-to-remove-or-delete-ppas-quick-tip/][How to Remove or Delete PPA in Ubuntu]]

** [[https://www.reallinuxuser.com/how-to-install-graphics-drivers-in-linux-mint/][How to install graphics drivers in Linux Mint]]

* Linux GPG

** [[https://moi.vonos.net/linux/beginners-installing-from-source/][Downloading and Security]]
   Some software providers sign archive files instead of (or as well as) providing an md5 checksum. In this case you should:

   - download the provider’s public key from their website (using https where possible)
   - download the “signature file” for the archive-file; this will be a small file which has the same base name as the downloaded file, with suffix “.sig” or “.asc”
   - perform the following steps
     Example: Emacs 26.3
     - Download the tar source:
       #+BEGIN_SRC sh
       wget "https://ftpmirror.gnu.org/emacs/emacs-26.3.tar.gz" -o /home/valgalsan/DatosMint/Downloads/emacs-26.3.tar.gz
       
       #+END_SRC

     - Get the PGP signature
       #+BEGIN_SRC sh
       wget "https://ftp.gnu.org/gnu/emacs/emacs-26.3.tar.gz.sig" -o /home/valgalsan/DatosMint/Downloads/emacs-26.3.tar.gz.sig
       #+END_SRC


* Linux From Scratch

** [[http://www.linuxfromscratch.org/lfs/view/stable/][LFS - book - Gerard Beekmans - Version 9.0]]

** Prerequisites 
*** [[http://www.tldp.org/HOWTO/Software-Building-HOWTO.html][Software-Building-HOWTO]]
    
    - [[http://www.tldp.org/HOWTO/Software-Building-HOWTO-4.html][4.Prepackaged Binaries]]

*** [[http://moi.vonos.net/linux/beginners-installing-from-source/][Beginner's Guide to Installing from Source]]

* Linux Backups

** [[https://github.com/teejee2008/timeshift][timeshift - System Restore Tool for Linux]]
   
** [[https://github.com/teejee2008/timeshift][TimeShift alternatives and similar tools]]

** [[https://linuxhint.com/timeshift_linux_mint_19_usb/][How to Use Timeshift to Backup and Restore Linux Mint 19 Systems from USB Drive]]

* Linux Mint Update and Upgrade

** [[https://itsfoss.com/upgrade-linux-mint-version/][How to Upgrade to Linux Mint 19 (Step by Step Tutorial)]]

* MSYS2-MINGW 

** [[https://www.booleanworld.com/get-unix-linux-environment-windows-msys2/][How to Get an Unix/Linux Environment on Windows with MSYS2]]

*** Adding MSYS2 to your PATH variable
   
    The MSYS2 tools (and that includes tools like grep) won’t be available if you don’t launch them through the Start Menu shortcut. To make them available everywhere, you need to add them to the “Path” variable like so:
    1. Open the Run box by pressing Windows + R, and type in _systempropertiesadvanced_.
    2. Click on the “Environment Variables” button.
    3. In the “System Variables” section, scroll down and double-click on the “Path” variable.
    4. If you’re on Windows 10, add the _C:\msys64\usr\bin_, and move this entry to the top.

*** The difference between MinGW32/64 and MSYS2
    
    From the MinGW shell, run:
    #+BEGIN_SRC sh
    declare > mingw-config
    #+END_SRC
    Again, run this from the MSYS2 shell:
    #+BEGIN_SRC sh
    declare > msys2-config
    #+END_SRC
    
    Now, you can diff these files to see the differences in environment variables. Here we’ve only shown what has changed; the actual diff is a whole lot longer.
    #+BEGIN_SRC sh
    diff mingw-config msys2-config
    #+END_SRC


* Bash Ubuntu in Windows 10

** Change directory
   
   WSL (Windows Subsystem Linux) stores your Windows drives in the /mnt folder, with the name of the drive as a subfolder.
   For example your C:\ drive will be present at /mnt/c/ for you to use.

   Keeping this in mind, you can swap to your specific folder like so:

   #+BEGIN_SRC sh
   cd /mnt/c/users/admi00895tq
   #+END_SRC

** [[https://github.com/hubisan/emacs-wsl#enable-the-windows-subsystem-for-linux][Install and run emacs with the Windows Subsystem for Linux (WSL) in Windows 10.]]


* Tomcat

** Version installed
   - [[https://www.mkyong.com/tomcat/how-to-check-tomcat-version-installed/][How to check Tomcat version Installed]]

   - Raspberry Home
     
     Para conocer el directorio de instalación:
     #+BEGIN_SRC sh
     sudo find / -name "version.sh"
     #+END_SRC

     #+RESULTS:
     /home/pi/tomcat/apache-tomcat-8.5.28/bin/version.sh 

     En directorio de instalación ejecutar
     #+BEGIN_SRC 
     /home/pi/tomcat/apache-tomcat-8.5.28/bin/.version.sh     
     #+END_SRC
     
     #+RESULTS:

     Using CATALINA_BASE:   /home/pi/tomcat/apache-tomcat-8.5.28
     Using CATALINA_HOME:   /home/pi/tomcat/apache-tomcat-8.5.28
     Using CATALINA_TMPDIR: /home/pi/tomcat/apache-tomcat-8.5.28/temp
     Using JRE_HOME:        /usr
     Using CLASSPATH:       /home/pi/tomcat/apache-tomcat-8.5.28/bin/bootstrap.jar:/home/pi/tomcat/apache-tomcat-8.5.28/bin/tomcat-juli.jar
     Server version: Apache Tomcat/8.5.28
     Server built:   Feb 6 2018 23:10:25 UTC
     Server number:  8.5.28.0
     OS Name:        Linux
     OS Version:     4.9.66-v7+
     Architecture:   arm

** Configurar consola de administración de tomcat

   1. nano conf/tomcat-users.xml

   Introducir estas lineas:
   <tomcat-users xmlns="http://tomcat.apache.org/xml" 
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
		 version="1.0">
	<role rolename="manager-gui"/>
	<user username="vgs" password="ValGalSan240907" roles="manager-gui"/>
   </tomcat-users> 
   
   2. Ahora es necesario reiniciar tomcat:
   
   #+BEGIN_SRC sh
   sudo systemctl restart tomcat.service
   #+END_SRC

   3. Configurar la aplicación web

      Todas las aplicaciones están en el directorio: /home/pi/tomcat/apache-tomcat-8.5.28/webapps
      
      Editamos el fichero: /home/pi/tomcat/apache-tomcat-8.5.28/webapps/manager/META-INF/context.xml
      
      Introducimos comentario a las lineas:
      
      #+BEGIN_SRC xml
      <!--
        <Valve className="org.apache.catalina.valves.RemoteAddrValve"
	       allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />
	<Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filt$

      -->
      #+END_SRC

    4. Introducimos en el navegador: 192.168.1.150:8080

    5. Seleccionamos "Web Application Manager". Usuario:vgs contraseña: "ValGalSanddmmyy" y...voilà.

      
* Elisp

** Downloads

#+BEGIN_SRC elisp
;; function to get a file from url
   (url-copy-file "http://www.star.bris.ac.uk/bjm/emacs_tutorial.org" (expand-file-name "~/emacs_tutorial.org") 1)
#+END_SRC

#+BEGIN_SRC elisp
;; Download Org Mode - Organizing Your Life In Plain Text
   (url-copy-file "http://doc.norang.ca/org-mode.org" (expand-file-name "~/Documents/repositorios/loqueaprendo/organizing_your_life_in_plain_text.org") 1)

#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
;; downloading worg.org
   (url-copy-file "https://orgmode.org/worg/index.org.html" (expand-file-name "~/Documents/repositorios/loqueaprendo/worg.org") 1)

#+END_SRC 

#+RESULTS:
: t


** Ejecutar código elisp entre etiquetas SRC: C-c C-c. 

** [[https://ftp.gnu.org/old-gnu/Manuals/emacs/html_node/emacs_472.html][Finding function and Variables Definition]]

=M-x find-function RET function RET=
    Find the definition of function in its source file. 
=M-x find-variable RET variable RET=
    Find the definition of variable in its source file. 
=M-x find-function-on-key RET key=
    Find the definition of the function that key invokes. 

** [[https://ftp.gnu.org/old-gnu/Manuals/emacs/html_node/emacs_334.html#SEC334][W.2 Tags Tables]]

** [[https://emacsredux.com/blog/2014/06/18/quickly-find-emacs-lisp-sources/][Quickly find Emacs Lisp sources]]

   - _C-h f_ and then the name of the function (and then <RET>).
   - you can get the full documentation for a variable by typing _C-h v_ and then the name of the variable (and then <RET>).
   - Also, _describe-function_ will tell you the location of the function definition.
   - if you want to see a function in its original source file, you can use the _xref-find-definitions_ function to jump to it.
   - For example, _xref-find-definitions_ will jump to the various nodes in the Texinfo source file of this document (provided that you've run the etags utility to record all the nodes in the manuals that come with Emacs; see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html#Create-Tags-Table][Create Tags Table]]).
   - To use the _xref-find-definitions_ command, type _M-._
   - The _C-h p_ command lets you search the standard Emacs Lisp libraries by topic keywords
   - _xref-find-definitions_ will jump to the various nodes in the Texinfo source file of this document (provided that you've run the etags utility to record all the nodes in the manuals that come with Emacs; see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html#Create-Tags-Table][Creating Tags Tables]]).

** [[https://web.cs.elte.hu/local/texinfo/elisp-intro/emacs-lisp-intro_63.html][A Simplified  beginning-of-buffer Definition]]
   
   #+BEGIN_SRC elisp
   
   (defun simplified-beginning-of-buffer ()
   "Move point to the beginning of the buffer; 
   leave mark at previous position."
     (interactive)
     (push-mark)
     (goto-char (point-min)))

   #+END_SRC
** [[][Code Characters for interactive]
** [[https://www.emacswiki.org/emacs/FrameSize][FrameSize -- At Emacs Startup, Programmaticaly (e.g. in your init file), Both Interactively and Programmatically]]


* Emacs  

** Refresh Dired: C-x b g

** GoTo

  - GoTo line: M-g g
  - GoTo line: M-x goto-line → move cursor to a given line position.
  - GoTo Buffer Position: M-g c
  - GoTo Begining Buffer: M-<
  - GoTo End Buffer; M->

** Line Numbers

  - Show line numbers: 
    - M-x global-display-line-numbers-mode → show line numbers in all buffers
    - M-x display-line-numbers-mode → show line numbers in current buffer.
    - M-x linum-mode → toggle line number in current.
    - M-x global-linum-mode → toggle line number in all buffers.

** [[https://www.gnu.org/software/emacs/manual/html_node/org/Handling-links.html][Handling links]]
   
   C-c C-x C-n     (org-next-link)
   C-c C-x C-p     (org-previous-link)

   #+BEGIN_SRC elisp

          (add-hook 'org-load-hook
            (lambda ()
              (define-key org-mode-map "\C-n" 'org-next-link)
              (define-key org-mode-map "\C-p" 'org-previous-link)))   
   
   #+END_SRC

   #+RESULTS:
   | lambda | nil | (define-key org-mode-map  (quote org-next-link)) | (define-key org-mode-map  (quote org-previous-link)) |
   

** Use-Package. 
   - [[https://www.smoothterminal.com/articles/setting-up-package-management-with-use-package][Setting up package management with use-package - blog - Josh Adams - Published on: 2017-05-16 ]]
     
#+BEGIN_SRC elisp

;; tell emacs do not initialize the package tool when it is loaded
(setq package-enable-at-startup nil)     

;; load emacs' built-in package tool
(require 'package)

;; provide remote package sources
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))

;; tell built-in package tool to get started
(package-initialize)

;; Bootstrap `use-package': if not installed, refresh remotes, install it.
;; https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; for now accept that this is magic
(eval-when-compile
  (require 'use-package))

;; get stable versions of packages unless otherwise specified
(setq use-package-always-pin "melpa-stable")

;; always make sure you have the package
(setq use-package-always-ensure t)

;; Examples: Install elixir-mode and sqlup mode
;; So, let's install elixir-mode. 
(use-package elixir-mode)

;; sqlup_mode
(use-package sqlup-mode ;; upcase SQL keywords as you type
  :init
  (add-hook 'sql-mode-hook 'sqlup-mode) ;; in SQL source files
  (add-hook 'sql-interactive-mode-hook 'sqlup-mode)) ;; in SQL REPLs

#+END_SRC

** [[https://www.gnu.org/software/emacs/download.html][Install Emacs with MSYS2]]
   
   - [[http://www.msys2.org/][MSYS2 installer. Download and Install. Official Site]]
   - MSYS2 users can install Emacs (64bits build) with the following:_pacman -S mingw-w64-x86_64-emacs_ For the 32bits build, evaluate: _pacman -S mingw-w64-i686-emacs_
   - [[https://github.com/msys2/MINGW-packages/issues/832][Install mingw-git using pacman]]
   - [[https://github.com/git-for-windows/git/wiki/Install-inside-MSYS2-proper][Install inside MSYS2 proper]]
     Please note that this scenario is not officially supported by Git for Windows.
   - [[https://github.com/msys2/msys2/wiki/How-does-MSYS2-differ-from-Cygwin][How does MSYS2 differ from Cygwin]]

** Install pdf-tools
*** [[https://github.com/politza/pdf-tools][pdf-tools github repository]]
** How to insert into the text buffer of a file the current date and time?
   - _C-u M-!_ Date. Insert shell command
** Init File 

   - [[https://www.emacswiki.org/emacs/InitFile][Emacs Wiki - Init 

** Examining and Setting Variables
   
   - Display the value and documentation of variable var =(describe-variable)=:
      C-h v var RET

   - Change the value of variable var to value: *M-x set-variable <RET> var <RET> value <RET>*

** Rectagles
   
   Rectangle commands operate on rectangular areas of the text: all the characters between a certain pair of columns, in a certain range of
   lines. Emacs has commands to kill rectangles, yank killed rectangles, clear them out, fill them with blanks or text, or delete them. Rectangle
   commands are useful with text in multicolumn formats, and for changing text into or out of such formats. 

** Registers

*** Saving Positions and Registers
    C-x r <SPC> r
    C-x rjr

*** Saving Text in Registers
    C-x rsr
    C-x rir
    M-x append-to-register <RET> r
    M-x prepend-to-register <RET> r

    When you are collecting text using append-to-register and
    prepend-to-register, you may want to separate individual collected
    pieces using a separator. In that case, configure a register-separator
    and store the separator text in to that register. For example, to get
    double newlines as text separator during the collection process, you
    can use the following setting. 

    #+BEGIN_SRC elisp

    (setq register-separator ?+)
    (set-register register-separator "\n\n")
    
    #+END_SRC

    #+RESULTS:
    : ((43 . 
    : 
    : ) (49 . When you are collecting text using append-to-register and
    : prepend-to-register, you may want to separate individual collected
    : pieces using a separator. In that case, configure a register-separator
    : and store the separator text in to that register. For example, to get
    : double newlines as text separator during the collection process, you
    : can use the following setting. 
    : ) (112 . #<marker at 20289 in loqueaprendo.org>))

*** Saving Rectangles in Registers
    C-x rrr
    C-x rir

*** Saving Window Configurations in Registers
    
    C-x rwr
    C-x rfr

** Line wraping

   #+BEGIN_SRC elisp

   (add-hook 'visual-line-mode-hook 'visual-fill-column-mode
   
   #+END_SRC

   #+RESULTS:
   | visual-fill-column-mode | visual-line-mode-set-explicitly |

** How to record and play a macro

*** High Level Steps to Record and Play inside Emacs

    1. Start recording a macro by pressing ctrl+x (
    2. Perform any actions inside the Emacs editor that you would like to record.
    3. Stop recording by pressing ctrl+x )
    4. Play the last recorded macro by pressing ctrl+x e 

*** High Level Steps for Naming and Saving emacs macro, and playing it later
    
    1. Press Ctrl+x Ctrl+k n
    2. Give name-of-macro, and press ENTER
    3. Run the named macro by pressing, M-x name-of-macro 

*** [[https://www.thegeekstuff.com/2010/07/emacs-macro-tutorial-how-to-record-and-play/][Emacs Macro Tutorial: How to Record and Play]]

** org-babel-shell-names
   - asegurarse que la variable org-babel-shell-names incluye, entre otros, "zsh" que es el que yo utilizo . (C-h v)
   - Call org-babel-shell-initialize mediante Alt-x

* Emacs Web Browser

 * [[https://www.gnu.org/software/emacs/manual/html_node/eww/index.html#Top][EWW Manual]]


* Windows 10

** Persistent flag from LocalBridge.exe program
   
   Yes the store version. The store might be disabled but I would not expect a continuous error to popup. If you aren't using it as you mentioned then try running this powershell command from within the users profile to uninstall the MSOffice UWP app for that user.
   
   #+BEGIN_SRC Powershell
   get-appxpackage | ? {$_.packagefullname -like '*MicrosoftOfficeHub*'} | remove-appxpackage
   #+END_SRC
   
   [[https://community.spiceworks.com/topic/2242998-one-user-experiencing-constant-permission-error][Source]]


* Hashes in books

The *intra hash* is relatively strict and takes into account the fields /title, author, editor, year, entrytype, journal, booktitle, volume, and number/. 
This allows a user to have articles with the same title from the same authors in the same year but in different volumes (e.g. a technical report and the corresponding journal article).

In contrast, the *inter hash* is less specific and only includes title, year, and author or editor (depending on what the user has entered).

In both hashes, all fields which are taken into account are normalized, i.e., certain special characters are removed, whitespace and author/editor names normalized. The latter is done by concatenating the first letter of the first name by a dot with the last name, both in lower case. Persons are then sorted alphabetically by this string and concatenated by a colon.

Source code

The computation of the hashes is done in the class 
_org.bibsonomy.model.util.SimHash_
It contains the following code to compute the intra hash:

#+BEGIN_SRC java

public static String getSimHash2(final BibTex bibtex) {
       return StringUtils.getMD5Hash(StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getTitle())     + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(PersonNameUtils.serializePersonNames(bibtex.getAuthor(), false))    + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(PersonNameUtils.serializePersonNames(bibtex.getEditor(), false))    + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getYear())      + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getEntrytype()) + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getJournal())   + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getBooktitle()) + " " +
          StringUtils.removeNonNumbersOrLetters(bibtex.getVolume())                 + " " +
          StringUtils.removeNonNumbersOrLetters(bibtex.getNumber())
       );
    }

#+END_SRC

The following code is responsible to compute the inter hash:

#+BEGIN_SRC java

public static String getSimHash1(final BibTex publication) {
    if (!present(StringUtils.removeNonNumbersOrLetters(PersonNameUtils.serializePersonNames(publication.getAuthor())))) {
       // no author set --> take editor
       return StringUtils.getMD5Hash(getNormalizedTitle(publication.getTitle()) + " " +
          PersonNameUtils.getNormalizedPersons(publication.getEditor())            + " " +
          getNormalizedYear(publication.getYear()));
    }
    // author set
    return StringUtils.getMD5Hash(getNormalizedTitle(publication.getTitle()) + " " + 
         PersonNameUtils.getNormalizedPersons(publication.getAuthor())            + " " + 
         getNormalizedYear(publication.getYear()));
}

To see how further help functions work, have a look at the [[https://bitbucket.org/bibsonomy/bibsonomy/src/stable/bibsonomy-model/src/main/java/org/bibsonomy/model/util/][Bitbucket Repository]]

#+END_SRC

Reference: [[https://www.bibsonomy.org/help_en/InterIntraHash][The blue social bookmark and publication sharing system - BibSonomy]]


* CSS Stylesheet

** [[https://www.w3schools.com/Css/default.asp][w3schools. CSS Tutorial]]


* Calibre
** CSS Style
   [[https://www.mobileread.com/forums/showthread.php?t=51500][Custom CSS Stylesheets for Calibre's Viewer]]


* Firefox

** [[https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly#w_windows-tabs][Keyboard Shortcuts]]
  
   - Close Tab _Ctrl + w
   - Close Window--> Ctrl + Shift + w
   - New Tab --> Ctrl + T
   - Move Tab Left --> Ctrl + Shift + Page Up
   - Move Tab Right --> Ctrl + Shift + Page Down
   - Go one Tab to the Left --> Ctrl + Shift + Tab
   - Go one Tab to the Right --> Ctrl + Tab
     *Nota: En Preferences hay que quitar el /tic/ en Ctrl+Tab cycles*
  

* Books Reading

** Clean Code:  A Handbook of Agile Software Craftsmanship

*** Bib reference

#+BEGIN_SRC bibtex

@book{robertmartin2008,
 Author = {Robert C. Martin},
 title = {Clean Code: A Handbook of Agile Software Craftsmanship},
 description = {Clean Code: A Handbook of Agile Software Craftsmanship (Book, 2008)},
 publisher = {Prentice Hall},
 interhash = {6488ae2655276e5edb10be6a7a858570},
 intrahash = {7c29a19506e41e3806b85395d6edf2ea},
 year = {2008},
 month = {aug},
 isbn = {9780132350884},
 url = {https://www.xarg.org/ref/a/0132350882/}
}

#+END_SRC

*** Preface

“Honesty in small things is not a small thing.”

God is in the details, said the architect Ludwig mies van der Rohe

Why? Because small things matter.

One of the major pillars of  TPM_ (Totasl Production Maintenance) is the set of so-called 5S principles

The 5S philosophy comprises these concepts:

- Seiri, or organization (think “/sort/” in English). Knowing where things are—using approaches such as suitable naming—is crucial. You think naming identifiers isn’t important? Read on in the following chapters.

- Seiton, or tidiness (think “/systematize/” in English). There is an old American saying: A place for everything, and everything in its place. A piece of code should be where you expect to find it—and, if not, you should re-factor to get it there.

- Seiso, or cleaning (think “/shine/” in English): Keep the workplace free of hanging wires, grease, scraps, and waste. What do the authors here say about littering your code with comments and commented-out code lines that capture history or wishes for the future? Get rid of them.

- Seiketsu, or standardization: The group agrees about how to keep the workplace clean.

- Shutsuke, or discipline ( self-discipline). This means having the discipline to follow the practices and to frequently reflect on one’s work and be willing to change.

I think it’s important to note that the Danish wisdom advises us not just to pay attention to small things, but also to be  honest  in small things. This means being honest to the code, honest to our colleagues about the state of our code and, most of all, being honest with ourselves about our code.

Be prepared to work hard while reading this book. This is not a “feel good” book that you can read on an airplane and finish before you land. This book will make you work,  and work hard. What kind of work will you be doing? You’ll be reading code—lots of code.

*** Chapter 1. Clean Code

**** There Will Be Code
     - Remember that code is really the language in which we ultimately express the require-
ments. We may create languages that are closer to the requirements. We may create tools
that help us parse and assemble those requirements into formal structures. But we will
never eliminate necessary precision—so there will always be code.

**** Bad Code
     
     Of course you have been impeded by bad code. So then—why did you write it?
     Were you trying to go fast? Were you in a rush? Probably so. Perhaps you felt that you
     didn’t have time to do a good job; that your boss would be angry with you if you took the
     time to clean up your code. Perhaps you were just tired of working on this program and
     wanted it to be over. Or maybe you looked at the backlog of other stuff that you had prom-
     ised to get done and realized that you needed to slam this module together so you could
     move on to the next. We’ve all done it.

**** The Total Cost of Owning a Mess

     As the mess builds, the productivity of the team continues to decrease, asymptotically
     approaching zero.

**** The Grand Redesign in the Sky
    
     If you have experienced even one small part of the story I just told, then you already
know that spending time keeping your code clean is not just cost effective; it’s a matter of
professional survival.

**** Attitude

     We blather about stupid managers and intolerant customers and useless marketing types
and telephone sanitizers. But the fault, dear Dilbert, is not in our stars, but in ourselves.
We are unprofessional.
     So too it is unprofessional for programmers to bend to the will of managers who don’t
understand the risks of making messes.

**** The Primal Conundrum

     The only way to make the deadline—the only way to go fast—is to keep the code as clean as possible at all times.

**** The Art of Clean Code?
     
     So too being able to recognize clean code from dirty code does not mean that we know how to write clean code!
     Writing clean code requires the disciplined use of a myriad little techniques applied
     through a painstakingly acquired sense of “cleanliness.”
     In short, a programmer who writes clean code is an artist who can take a blank screen
     through a series of transformations until it is an elegantly coded system.

**** What Is Clean Code?

     *Bjarne Stroustrup, inventor of C++ and author of The C++ Programming Language:*
     
     "I like my code to be elegant and efficient. The logic should be straightforward to make it hard 
     for bugs to hide, the dependencies minimal to ease maintenance, error handling complete
     according to an articulated strategy, and performance close to optimal so as not to tempt
     people to make the code messy with unprincipled optimizations. Clean code does one thing
     well."
     
     /Elegant/. /Pleasing/. /Efficiency/
     Bjarne also mentions that error handing should be complete. This goes to the disci-
     pline of paying attention to details. Abbreviated error handling is just one way that pro-
     grammers gloss over details.
     
     *Grady Booch, author of Object Oriented Analysis and Design with
     Applications*

     "Clean code is simple and direct. Clean code
     reads like well-written prose. Clean code never
     obscures the designer’s intent but rather is full
     of crisp abstractions and straightforward lines
     of control."

     /readability perspective/

     *“Big” Dave Thomas, founder of OTI, godfather of the Eclipse strategy*

     "Clean code can be read, and enhanced by a
     developer other than its original author. It has
     unit and acceptance tests. It has meaningful
     names. It provides one way rather than many
     ways for doing one thing. It has minimal depen-
     dencies, which are explicitly defined, and pro-
     vides a clear and minimal API. Code should be
     literate since depending on the language, not all
     necessary information can be expressed clearly
     in code alone."

     /Dave asserts that clean code makes it easy for other people to enhance it./
     /Smaller is better./

     /Dave also says that code should be literate./

     *Michael Feathers, author of Working Effectively with Legacy Code*

     "I could list all of the qualities that I notice in
     clean code, but there is one overarching quality
     that leads to all of them. Clean code always
     looks like it was written by someone who cares.
     There is nothing obvious that you can do to
     make it better. All of those things were thought
     about by the code’s author, and if you try to
     imagine improvements, you’re led back to
     where you are, sitting in appreciation of the
     code someone left for you—code left by some-
     one who cares deeply about the craft."

     /How to Care for Code/

     *Ron Jeffries, author of Extreme Programming Installed and Extreme Programming 
     Adventures in C#*
    
     *Ward Cunningham, inventor of Wiki, inventor of Fit, coinventor of eXtreme Programming. Motive force behind Design Patterns. Smalltalk and OO
     thought leader. The godfather of all those who care about code.* 

**** The Boy Scout Rule

     The Boy Scouts of America have a simple rule that we can apply to our profession.
Leave the campground cleaner than you found it

     

** The Linux Command Line

*** Bibtext reference 

#+BEGIN_SRC bibtex

@book{williamshottsjr.2012,
 Author = {William E. Shotts Jr.},
 title = {The Linux Command Line: A Complete Introduction},
 description = {The Linux Command Line: A Complete Introduction (Book, 2012)},
 publisher = {No Starch Press, Incorporated},
 interhash = {e28c39efbfbae594325b72cb5c52a1d3},
 intrahash = {fc00c4f75a45fb08e0441c83c7bcc2dd},
 year = {2012},
 month = {jan},
 isbn = {9781593273897},
 url = {http://linuxcommand.sourceforge.net/index.php}
}

#+END_SRC

*** Chapter 2
    
    - Changing current directory: _cd_
      
      - Absolute pathnames. Ex: _cd /usr/bin_

      - Relative pathnames. Ex: _cd ./directory inside current directory. cd ../directory into the current parent directory.

    - Important facts about file names

    - ls—List directory contents even specify multiple directories: ls ~ /usr
      #+BEGIN_SRC sh
      ls -lt
      ls -lt --reverse
      #+END_SRC

    - file—Determine file type.

    - less—View file contents.
*** Chapter_5. Working with commands
    
    - type – Indicate how a command name is interpreted
    - which – Display which executable program will be executed
    - help – Get help for shell builtins
    - man – Display a command's manual page
    - apropos – Display a list of appropriate commands
    - info – Display a command's info entry
    - whatis – Display one-line manual page descriptions
    - alias – Create an alias for a command

      #+BEGIN_SRC sh
      type cp
      type ls
      type type

      which ls
      which cd

      help cd
      

      
      #+END_SRC




** [[https://www.masteringemacs.org/article/beginners-guide-to-emacs][An Emacs Tutorial: Beginner’s Guide to Emacs by Mickey Petersen]]

   #+BEGIN_SRC bibtex

   @book{madsenpirie2006,
   Author = {Madsen Pirie},
   title = {How to Win Every Argument: The Use and Abuse of Logic},
   description = {How to Win Every Argument: The Use and Abuse of Logic (Book, 2006)},
   publisher = {Continuum Intl Pub Group},
   interhash = {561ad6fe71611fda3f4b7eceed37261e},
   intrahash = {f0e906ae7b95d49be7fbac5b80c3e6c4},
   year = {2006},
   month = {jun},
   isbn = {0826490069},
   url = {https://masteringemacs.org/}
   
   }
   
   #+END_SRC    
*** Modes

**** an excellent package for most web-focused languages: [[https://www.emacswiki.org/emacs/nXhtml][nXhtml - Emacs wiki]]
**** To get a complete list of all modes running and all the keybindings they introduce, type C-h m

*** Evaluating changes and new code

     + M-x eval-region
     + M-x eval-buffer
     + To evaluate one piece of code individually: C-M-x
     + To evaluate block of code in org-mode: C-c C-c

*** Line numbers

    - to enable line numbers in the margin of the active buffer by running _M-x linum-mode_
    - To enable it globally for all buffers run _M-x global-linum-mode_
    - To enable it globally and permanently add this to your .emacs file: _(global-linum-mode 1)_
    - Now you can customize it further with: _M-x customize-group RET linum RET_

*** "Interactively Do Things" IDO Mode

    Basically it makes switching between buffers (and optionally files) really easy as you simply type parts of a name and Ido will automatically narrow the list to just the ones matching the search text.
    
    I recommend you put this in your .emacs file:

    #+BEGIN_SRC elisp

    (ido-mode 1)
    (setq ido-enable-flex-matching t)
    
    #+END_SRC

    #+RESULTS:
    : t

    IF you want Ido mode to work with C-x C-f (find-files) then add this as well:

    #+BEGIN_SRC elisp

    (setq ido-everywhere t)
    
    #+END_SRC

    #+RESULTS:
    : t

*** Hiding the splash screen and banner

    Emacs by default will pester you with a splash screen and a message in the echo area. To disable both, and have emacs default to its *scratch* buffer, add this to your .emacs:

    #+BEGIN_SRC elisp

    (setq inhibit-startup-message t
          inhibit-startup-echo-area-message t)  
    
    #+END_SRC

    #+RESULTS:
    : t

*** Rebinding the CAPS LOCK key

    - MS Windows I recommend [[https://www.randyrants.com/2008/12/sharpkeys_30/][SharpKeys, a free tool that permanently rebinds the keys.]]
    - On Linux you can use xmodmap or the ‘System -> Prefs -> Keyboard’ section if you’re using Ubuntu and Gnome.
    - And finally, to make up for the fact that you no longer have a CAPS LOCK key I suggest learning the following keys instead:
    - [[http://wiki.c2.com/?RemapCapsLock][Remap Caps Lock with xmodemap with examples]]

    To UPCASE A REGION type C-x C-u; to UPCASE a single word, type M-u
    To downcase a region type C-x C-l; to downcase a single word, type M-l
    To Capitalize A Region type M-x capitalize-region; to Capitalize a single word, type M-c

*** Making Emacs Auto Indent
    
    I prefer to enable it globally and then disable it locally for each mode I do not like.
    Here’s how you would enable it globally:
    #+BEGIN_SRC elisp

    (define-key global-map (kbd "RET") 'newline-and-indent)
    
    #+END_SRC

    #+RESULTS:
    : newline-and-indent

*** How do I customize the Font and Background    

    - To customize the default font and color, type M-x customize-face RET default RET.
    - To customize the default syntax highlighter (also called “font locking”) typeM-x customize-group RET font-lock-faces RET.

*** Undoing changes
    _C-x u_ or C_

*** Loading New Packages

*** Setting up your load path
    
    Your load path is where Emacs will search for files to load.
    To inspect the load path you can type _C-h v load-path_ RET.
    Add this to your .emacs, substituting the example path below with one of your own choosing. 
    I recommend ~/.emacs.d/ or another sub-directory to your home directory.
    #+BEGIN_SRC elisp

    ;; You can change the path here
    (add-to-list 'load-path "~/.emacs.d/myelisp")
    
    #+END_SRC

    #+RESULTS:
    | ~/.emacs.d/myelisp | ~/.emacs.d/ | c:/Users/Admi00895tq/.emacs.d/elpa/auctex-12.2.0/ | c:/Users/Admi00895tq/.emacs.d/elpa/auctex-12.2.0 | c:/Users/Admi00895tq/.emacs.d/elpa/cdlatex-4.7 | c:/Users/Admi00895tq/.emacs.d/elpa/org-bullets-0.2.4 | c:/Users/Admi00895tq/.emacs.d/elpa/pdf-tools-0.90 | c:/Users/Admi00895tq/.emacs.d/elpa/tablist-1.0 | c:/Users/Admi00895tq/.emacs.d/elpa/try-0.0.1 | c:/Users/Admi00895tq/.emacs.d/elpa/use-package-2.4 | c:/Users/Admi00895tq/.emacs.d/elpa/bind-key-2.4 | c:/Users/Admi00895tq/.emacs.d/elpa/which-key-3.3.1 | c:/msys64/mingw64/share/emacs/26.3/site-lisp | c:/msys64/mingw64/share/emacs/site-lisp | c:/msys64/mingw64/share/emacs/26.3/lisp | c:/msys64/mingw64/share/emacs/26.3/lisp/vc | c:/msys64/mingw64/share/emacs/26.3/lisp/url | c:/msys64/mingw64/share/emacs/26.3/lisp/textmodes | c:/msys64/mingw64/share/emacs/26.3/lisp/progmodes | c:/msys64/mingw64/share/emacs/26.3/lisp/play | c:/msys64/mingw64/share/emacs/26.3/lisp/org | c:/msys64/mingw64/share/emacs/26.3/lisp/nxml | c:/msys64/mingw64/share/emacs/26.3/lisp/net | c:/msys64/mingw64/share/emacs/26.3/lisp/mh-e | c:/msys64/mingw64/share/emacs/26.3/lisp/mail | c:/msys64/mingw64/share/emacs/26.3/lisp/leim | c:/msys64/mingw64/share/emacs/26.3/lisp/language | c:/msys64/mingw64/share/emacs/26.3/lisp/international | c:/msys64/mingw64/share/emacs/26.3/lisp/image | c:/msys64/mingw64/share/emacs/26.3/lisp/gnus | c:/msys64/mingw64/share/emacs/26.3/lisp/eshell | c:/msys64/mingw64/share/emacs/26.3/lisp/erc | c:/msys64/mingw64/share/emacs/26.3/lisp/emulation | c:/msys64/mingw64/share/emacs/26.3/lisp/emacs-lisp | c:/msys64/mingw64/share/emacs/26.3/lisp/cedet | c:/msys64/mingw64/share/emacs/26.3/lisp/calendar | c:/msys64/mingw64/share/emacs/26.3/lisp/calc | c:/msys64/mingw64/share/emacs/26.3/lisp/obsolete |

    Now that you’ve added a custom path you can put your files in there. 
    If your package has lots of files and its own directory structure 
    you can go ahead and explicitly instead.

*** Loading the package

    Emacs can load files in one of several ways:
      - By invoking _(require 'feature)_ if the package has _(provide 'feature)_ somewhere in the file.
      - By explicitly calling _(load-library "packagefilename")_. 
        I would recommend this unless you know the name of the feature provided by the package.
	#+BEGIN_SRC emacs-lisp

	(load-library "column-marker.el")
	
	#+END_SRC

	#+RESULTS:
	: t

*** Testing that it worked

    You can switch to the buffer *Messages* and see if you can spot any errors.
    Now you’re ready to use your new package.

*** Conclusion

    I recommend reading my article series Effective Editing in Emacs.


** [[https://www.masteringemacs.org/article/effective-editing-movement][Effective Editing I: Movement]]


    
* Texinfo

  - [[https://www.linuxjournal.com/article/2840][What's GNU: Texinfo - LINUX Journal - Closed on August 2019]]

  - [[https://en.wikipedia.org/wiki/Texinfo][Wikipedia - Texinfo]]

  - [[https://www.gnu.org/software/texinfo/manual/texinfo/html_node/index.html#SEC_Contents][GNU: Texinfo 6.7]]





* forensic tools

** clonezilla

** Acronis True Image 

** [[https://sourceforge.net/p/ophcrack/wiki/Frequently%20Asked%20Questions/#which-version-of-the-livecd-should-i-download][ophcrack -wiki-]]
   

* acer upgrade

** [[https://www.youtube.com/watch?v=gAir6cYysK8&list=PL3QtniWQf6P4HYadpA5CHys40banTK5E6&index=5&t=0s][cpu upgrade in Aer Aspire 8930G laptop (E8335 replaces T6400) -video-]]

