#+TITLE: Lo que aprendo. elisp
#+AUTHOR: valro
#+DATE: 06/12/2019
;;#+STARTUP: showall 

------
* Org Mode

** [[http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/][WRAP TEXT IN AN ORG-MODE BLOCK]] 

In my most recent post on org-mode, I talked about using blocks to mark text as being latex, 
or source code and so on. I mentioned using the shortcuts like <e then TAB on a new line to create an empty block. 
Sometimes it is handy to wrap existing text in a block, and the following function does that for the text 
you have selected.

This has been in my config file for ages and I can’t remember where it came from – I know I didn’t write it! 
A bit of googleing suggests this could be the origin, but if anyone knows different, let me know.

I bind the function to C-< because it reminds me of the < shortcuts to create the blocks, 
and I don’t use the org-cycle-agenda-files that is usually bound to that key combo.

#+BEGIN_SRC emacs-elisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; function to wrap blocks of text in org templates                       ;;
;; e.g. latex or src etc                                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun org-begin-template ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
                (insert "#+END_" choice "\n")
                (goto-char start)
                (insert "#+BEGIN_" choice "\n")))
             (t
              (insert "#+BEGIN_" choice "\n")
              (save-excursion (insert "#+END_" choice))))))))))

;;bind to key
(define-key org-mode-map (kbd "C-<") 'org-begin-template)

#+END_SRC


** [[https://orgmode.org/worg/][Hello Oreg, The Org Mode Community]]

** org-capture

#+BEGIN_SRC elisp
;; C-c c is for capture, it's good enough for me
(define-key global-map "\C-cc" 'org-capture)
;; force UTF-8 
(setq org-export-coding-system 'utf-8)

#+END_SRC

#+RESULTS:
: utf-8

#+BEGIN_SRC elisp
;; This changes the default file location for our tasks from ~/.notes to an entry in our Dropbox folder. Why there? Install a copy of Orgzly on your phone, and point it to the notes folder in your Dropbox account, and you’ll find your new task shown there.  
(setq org-default-notes-file "~/Dropbox/notes/tasks.org")
;; leer como sincronizar con orgzly
#+END_SRC
If you wanted to divide tasks into personal and work. We will let the tasks.org file (defined above) contain our personal stuff, and work-related tasks will go into work.org: 
-----
#+BEGIN_SRC elisp
(add-to-list 'org-capture-templates
             '("w" "Work-related Task"  entry
               (file "~/Dropbox/notes/work.org")
               "* TODO %?" :empty-lines 1))

#+END_SRC

#+RESULTS:
| w | Work-related Task | entry | (file ~/Dropbox/notes/work.org) | * TODO %? | :empty-lines | 1 |

-----
Run org-capture, and we now have our new w template (but we lost our default). Type q and let’s configure org-capture to have both: 
-----
#+BEGIN_SRC elisp
(add-to-list 'org-capture-templates
             '("t" "Personal Task"  entry
               (file org-default-notes-file)
               "* TODO %?" :empty-lines 1))

#+END_SRC

#+RESULTS:
| t | Personal Task     | entry | (file org-default-notes-file)   | * TODO %? | :empty-lines | 1 |
| w | Work-related Task | entry | (file ~/Dropbox/notes/work.org) | * TODO %? | :empty-lines | 1 |

-----

* Raspberry home

** Conexión con ssh
   - abrir consola
   #+BEGIN_SRC 
   ssh pi@192.168.1.150
   #+END_SRC
   - introducir contraseña
   Password: ValGalSanddmmyy
** Visualizar página Tomcat
   - El servicio tomcat está activo por defecto
   - Introducir en Navegador web: 192.168.1.150:8080

* Linux Commands

** [[https://www.tecmint.com/list-all-running-services-under-systemd-in-linux/][Listing Running Services Under SystemD in Linux]]

   - Listing running services
   
     #+BEGIN_SRC sh

     systemctl
     systemctl | grep "tomcat"

     systemctl list-units --type=service
     systemctl --type=service

     systemctl list-units --type=service --state=active
     systemctl --type=service --state=active

     systemctl list-units --type=service --state=running 
     systemctl --type=service --state=running

   #+END_SRC

   - The port they use
     To determine the port a daemon process is listening on, you can use the netstat or ss tools as shown.
     Where the flag -l means print all listening sockets, -t displays all TCP connections, -u shows all UDP connections, -n means print numeric port numbers (instead of application names) and -p means show application name.
     
     #+BEGIN_SRC 
     netstat -ltup | grep "mysql"    
     #+END_SRC
   
   - firewall


** Linux Networking Commands 

*** [[https://geekflare.com/linux-networking-commands/][10 Useful Linux Networking Commands]]
    
    1. Ifconfig
    2. traceroute
    3. dig (Domain Information Groper)
    4. telnet
       #+BEGIN_SRC 
       telnet connect destination host:port via a telnet protocol if connection establishes means connectivity between two hosts is working fine.
       #+END_SRC
    5. nslookup
    6. netstat
    7. w
    8. nmap
    9. scp
    10. Enable/Disable Network Interface

*** [[https://haydenjames.io/linux-networking-commands-scripts/][Linux Networking commands and scripts]]

    This list of Linux Networking commands and scripts, will receive ongoing updates, similar to the other lists on [[https://haydenjames.io/linux-benchmark-scripts-tools/][this blog…]]
       

** [[https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je#intermediate][101 Bash Commands and Tips for Beginners to Experts - Andrew - Blog interesante - Jan 13 Updated on Sep 25, 2019 ・40 min read]]

   1. _ncdu_ ((NCurses Disk Usage) provides a navigable overview of file space usage, like an improved du. It opens a read-only vim-like window (press q to quit))
   2. _top_ / _htop_ 
      top displays all currently-running processes and their owners, memory usage, and more. htop is an improved, interactive top. (Note: you can pass the -u username flag to restrict the displayed processes to only those owner by username.)
   3. REPLs
      A REPL is a Read-Evaluate-Print Loop, similar to the command line, but usually used for particular programming languages.
      You can open the Python REPL with the python command (and quit with the quit() function):
   4. Environment Variables and Aliases
      
      *Environment variables* (sometimes shortened to "env vars") are persistent variables that can be created and used within your bash shell. They are defined with an equals sign (=) and used with a dollar sign ($). You can see all currently-defined env vars with _printenv_:
      
      *Aliases*
 

* MSYS2-MINGW 

** [[https://www.booleanworld.com/get-unix-linux-environment-windows-msys2/][How to Get an Unix/Linux Environment on Windows with MSYS2]]

*** Adding MSYS2 to your PATH variable
   
    The MSYS2 tools (and that includes tools like grep) won’t be available if you don’t launch them through the Start Menu shortcut. To make them available everywhere, you need to add them to the “Path” variable like so:
    1. Open the Run box by pressing Windows + R, and type in _systempropertiesadvanced_.
    2. Click on the “Environment Variables” button.
    3. In the “System Variables” section, scroll down and double-click on the “Path” variable.
    4. If you’re on Windows 10, add the _C:\msys64\usr\bin_, and move this entry to the top.

*** The difference between MinGW32/64 and MSYS2
    
    From the MinGW shell, run:
    #+BEGIN_SRC sh
    declare > mingw-config
    #+END_SRC
    Again, run this from the MSYS2 shell:
    #+BEGIN_SRC sh
    declare > msys2-config
    #+END_SRC
    
    Now, you can diff these files to see the differences in environment variables. Here we’ve only shown what has changed; the actual diff is a whole lot longer.
    #+BEGIN_SRC sh
    diff mingw-config msys2-config
    #+END_SRC


* Bash Ubuntu in Windows 10

** Change directory
   
   WSL (Windows Subsystem Linux) stores your Windows drives in the /mnt folder, with the name of the drive as a subfolder.
   For example your C:\ drive will be present at /mnt/c/ for you to use.

   Keeping this in mind, you can swap to your specific folder like so:

   #+BEGIN_SRC sh
   cd /mnt/c/users/admi00895tq
   #+END_SRC

** [[https://github.com/hubisan/emacs-wsl#enable-the-windows-subsystem-for-linux][Install and run emacs with the Windows Subsystem for Linux (WSL) in Windows 10.]]


* Tomcat

** Version installed
   - [[https://www.mkyong.com/tomcat/how-to-check-tomcat-version-installed/][How to check Tomcat version Installed]]

   - Raspberry Home
     
     Para conocer el directorio de instalación:
     #+BEGIN_SRC sh
     sudo find / -name "version.sh"
     #+END_SRC

     #+RESULTS:
     /home/pi/tomcat/apache-tomcat-8.5.28/bin/version.sh 

     En directorio de instalación ejecutar
     #+BEGIN_SRC 
     /home/pi/tomcat/apache-tomcat-8.5.28/bin/.version.sh     
     #+END_SRC
     
     #+RESULTS:

     Using CATALINA_BASE:   /home/pi/tomcat/apache-tomcat-8.5.28
     Using CATALINA_HOME:   /home/pi/tomcat/apache-tomcat-8.5.28
     Using CATALINA_TMPDIR: /home/pi/tomcat/apache-tomcat-8.5.28/temp
     Using JRE_HOME:        /usr
     Using CLASSPATH:       /home/pi/tomcat/apache-tomcat-8.5.28/bin/bootstrap.jar:/home/pi/tomcat/apache-tomcat-8.5.28/bin/tomcat-juli.jar
     Server version: Apache Tomcat/8.5.28
     Server built:   Feb 6 2018 23:10:25 UTC
     Server number:  8.5.28.0
     OS Name:        Linux
     OS Version:     4.9.66-v7+
     Architecture:   arm

** Configurar consola de administración de tomcat

   1. nano conf/tomcat-users.xml

   Introducir estas lineas:
   <tomcat-users xmlns="http://tomcat.apache.org/xml" 
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
		 version="1.0">
	<role rolename="manager-gui"/>
	<user username="vgs" password="ValGalSan240907" roles="manager-gui"/>
   </tomcat-users> 
   
   2. Ahora es necesario reiniciar tomcat:
   
   #+BEGIN_SRC sh
   sudo systemctl restart tomcat.service
   #+END_SRC

   3. Configurar la aplicación web

      Todas las aplicaciones están en el directorio: /home/pi/tomcat/apache-tomcat-8.5.28/webapps
      
      Editamos el fichero: /home/pi/tomcat/apache-tomcat-8.5.28/webapps/manager/META-INF/context.xml
      
      Introducimos comentario a las lineas:
      
      #+BEGIN_SRC xml
      <!--
        <Valve className="org.apache.catalina.valves.RemoteAddrValve"
	       allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />
	<Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filt$

      -->
      #+END_SRC

    4. Introducimos en el navegador: 192.168.1.150:8080

    5. Seleccionamos "Web Application Manager". Usuario:vgs contraseña: "ValGalSanddmmyy" y...voilà.

      
* Elisp

** Downloads

#+BEGIN_SRC elisp
;; function to get a file from url
   (url-copy-file "http://www.star.bris.ac.uk/bjm/emacs_tutorial.org" (expand-file-name "~/emacs_tutorial.org") 1)
#+END_SRC

#+BEGIN_SRC elisp
;; Download Org Mode - Organizing Your Life In Plain Text
   (url-copy-file "http://doc.norang.ca/org-mode.org" (expand-file-name "~/Documents/repositorios/loqueaprendo/organizing_your_life_in_plain_text.org") 1)

#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
;; downloading worg.org
   (url-copy-file "https://orgmode.org/worg/index.org.html" (expand-file-name "~/Documents/repositorios/loqueaprendo/worg.org") 1)

#+END_SRC 

#+RESULTS:
: t


** Ejecutar código elisp entre etiquetas SRC: C-c C-c. 

** [[https://ftp.gnu.org/old-gnu/Manuals/emacs/html_node/emacs_472.html][Finding function and Variables Definition]]

=M-x find-function RET function RET=
    Find the definition of function in its source file. 
=M-x find-variable RET variable RET=
    Find the definition of variable in its source file. 
=M-x find-function-on-key RET key=
    Find the definition of the function that key invokes. 

** [[https://ftp.gnu.org/old-gnu/Manuals/emacs/html_node/emacs_334.html#SEC334][W.2 Tags Tables]]

** [[https://emacsredux.com/blog/2014/06/18/quickly-find-emacs-lisp-sources/][Quickly find Emacs Lisp sources]]

   - _C-h f_ and then the name of the function (and then <RET>).
   - you can get the full documentation for a variable by typing _C-h v_ and then the name of the variable (and then <RET>).
   - Also, _describe-function_ will tell you the location of the function definition.
   - if you want to see a function in its original source file, you can use the _xref-find-definitions_ function to jump to it.
   - For example, _xref-find-definitions_ will jump to the various nodes in the Texinfo source file of this document (provided that you've run the etags utility to record all the nodes in the manuals that come with Emacs; see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html#Create-Tags-Table][Create Tags Table]]).
   - To use the _xref-find-definitions_ command, type _M-._
   - The _C-h p_ command lets you search the standard Emacs Lisp libraries by topic keywords
   - _xref-find-definitions_ will jump to the various nodes in the Texinfo source file of this document (provided that you've run the etags utility to record all the nodes in the manuals that come with Emacs; see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html#Create-Tags-Table][Creating Tags Tables]]).

** [[https://web.cs.elte.hu/local/texinfo/elisp-intro/emacs-lisp-intro_63.html][A Simplified  beginning-of-buffer Definition]]
   
   #+BEGIN_SRC elisp
   
   (defun simplified-beginning-of-buffer ()
   "Move point to the beginning of the buffer; 
   leave mark at previous position."
     (interactive)
     (push-mark)
     (goto-char (point-min)))

   #+END_SRC
** [[][Code Characters for interactive]
* Emacs 

** Refresh Dired: C-x b g
** GoTo

  - GoTo line: M-g g
  - GoTo line: M-x goto-line → move cursor to a given line position.
  - GoTo Buffer Position: M-g c
  - GoTo Begining Buffer: M-<
  - GoTo End Buffer; M->

** Line Numbers

  - Show line numbers: 
    - M-x global-display-line-numbers-mode → show line numbers in all buffers
    - M-x display-line-numbers-mode → show line numbers in current buffer.
    - M-x linum-mode → toggle line number in current.
    - M-x global-linum-mode → toggle line number in all buffers.

** [[https://www.gnu.org/software/emacs/manual/html_node/org/Handling-links.html][Handling links]]
** Use-Package. 
   - [[https://www.smoothterminal.com/articles/setting-up-package-management-with-use-package][Setting up package management with use-package - blog - Josh Adams - Published on: 2017-05-16 ]]
     
#+BEGIN_SRC elisp

;; tell emacs do not initialize the package tool when it is loaded
(setq package-enable-at-startup nil)     

;; load emacs' built-in package tool
(require 'package)

;; provide remote package sources
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))

;; tell built-in package tool to get started
(package-initialize)

;; Bootstrap `use-package': if not installed, refresh remotes, install it.
;; https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; for now accept that this is magic
(eval-when-compile
  (require 'use-package))

;; get stable versions of packages unless otherwise specified
(setq use-package-always-pin "melpa-stable")

;; always make sure you have the package
(setq use-package-always-ensure t)

;; Examples: Install elixir-mode and sqlup mode
;; So, let's install elixir-mode. 
(use-package elixir-mode)

;; sqlup_mode
(use-package sqlup-mode ;; upcase SQL keywords as you type
  :init
  (add-hook 'sql-mode-hook 'sqlup-mode) ;; in SQL source files
  (add-hook 'sql-interactive-mode-hook 'sqlup-mode)) ;; in SQL REPLs

#+END_SRC

** [[https://www.gnu.org/software/emacs/download.html][Install Emacs with MSYS2]]
   
   - [[http://www.msys2.org/][MSYS2 installer. Download and Install. Official Site]]
   - MSYS2 users can install Emacs (64bits build) with the following:_pacman -S mingw-w64-x86_64-emacs_ For the 32bits build, evaluate: _pacman -S mingw-w64-i686-emacs_
   - [[https://github.com/msys2/MINGW-packages/issues/832][Install mingw-git using pacman]]
   - [[https://github.com/git-for-windows/git/wiki/Install-inside-MSYS2-proper][Install inside MSYS2 proper]]
     Please note that this scenario is not officially supported by Git for Windows.
   - [[https://github.com/msys2/msys2/wiki/How-does-MSYS2-differ-from-Cygwin][How does MSYS2 differ from Cygwin]]

** Install pdf-tools
*** [[https://github.com/politza/pdf-tools][pdf-tools github repository]]
** How to insert into the text buffer of a file the current date and time?
   - _C-u M-!_ Date. Insert shell command
** Init File 
   - [[https://www.emacswiki.org/emacs/InitFile][Emacs Wiki - Init File]]

* Windows 10

** Persistent flag from LocalBridge.exe program
   
   Yes the store version. The store might be disabled but I would not expect a continuous error to popup. If you aren't using it as you mentioned then try running this powershell command from within the users profile to uninstall the MSOffice UWP app for that user.
   
   #+BEGIN_SRC Powershell
   get-appxpackage | ? {$_.packagefullname -like '*MicrosoftOfficeHub*'} | remove-appxpackage
   #+END_SRC
   
   [[https://community.spiceworks.com/topic/2242998-one-user-experiencing-constant-permission-error][Source]]


* Hashes in books

The *intra hash* is relatively strict and takes into account the fields /title, author, editor, year, entrytype, journal, booktitle, volume, and number/. 
This allows a user to have articles with the same title from the same authors in the same year but in different volumes (e.g. a technical report and the corresponding journal article).

In contrast, the *inter hash* is less specific and only includes title, year, and author or editor (depending on what the user has entered).

In both hashes, all fields which are taken into account are normalized, i.e., certain special characters are removed, whitespace and author/editor names normalized. The latter is done by concatenating the first letter of the first name by a dot with the last name, both in lower case. Persons are then sorted alphabetically by this string and concatenated by a colon.

Source code

The computation of the hashes is done in the class 
_org.bibsonomy.model.util.SimHash_
It contains the following code to compute the intra hash:

#+BEGIN_SRC java

public static String getSimHash2(final BibTex bibtex) {
       return StringUtils.getMD5Hash(StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getTitle())     + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(PersonNameUtils.serializePersonNames(bibtex.getAuthor(), false))    + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(PersonNameUtils.serializePersonNames(bibtex.getEditor(), false))    + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getYear())      + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getEntrytype()) + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getJournal())   + " " + 
          StringUtils.removeNonNumbersOrLettersOrDotsOrSpace(bibtex.getBooktitle()) + " " +
          StringUtils.removeNonNumbersOrLetters(bibtex.getVolume())                 + " " +
          StringUtils.removeNonNumbersOrLetters(bibtex.getNumber())
       );
    }

#+END_SRC

The following code is responsible to compute the inter hash:

#+BEGIN_SRC java

public static String getSimHash1(final BibTex publication) {
    if (!present(StringUtils.removeNonNumbersOrLetters(PersonNameUtils.serializePersonNames(publication.getAuthor())))) {
       // no author set --> take editor
       return StringUtils.getMD5Hash(getNormalizedTitle(publication.getTitle()) + " " +
          PersonNameUtils.getNormalizedPersons(publication.getEditor())            + " " +
          getNormalizedYear(publication.getYear()));
    }
    // author set
    return StringUtils.getMD5Hash(getNormalizedTitle(publication.getTitle()) + " " + 
         PersonNameUtils.getNormalizedPersons(publication.getAuthor())            + " " + 
         getNormalizedYear(publication.getYear()));
}

To see how further help functions work, have a look at the [[https://bitbucket.org/bibsonomy/bibsonomy/src/stable/bibsonomy-model/src/main/java/org/bibsonomy/model/util/][Bitbucket Repository]]

#+END_SRC

Reference: [[https://www.bibsonomy.org/help_en/InterIntraHash][The blue social bookmark and publication sharing system - BibSonomy]]


* Books

** Clean Code:  A Handbook of Agile Software Craftsmanship

*** Bib reference

#+BEGIN_SRC bibtex

@book{robertmartin2008,
 Author = {Robert C. Martin},
 title = {Clean Code: A Handbook of Agile Software Craftsmanship},
 description = {Clean Code: A Handbook of Agile Software Craftsmanship (Book, 2008)},
 publisher = {Prentice Hall},
 interhash = {6488ae2655276e5edb10be6a7a858570},
 intrahash = {7c29a19506e41e3806b85395d6edf2ea},
 year = {2008},
 month = {aug},
 isbn = {9780132350884},
 url = {https://www.xarg.org/ref/a/0132350882/}
}

#+END_SRC

*** Preface

“Honesty in small things is not a small thing.”

God is in the details, said the architect Ludwig mies van der Rohe

Why? Because small things matter.

One of the major pillars of  TPM_ (Totasl Production Maintenance) is the set of so-called 5S principles

The 5S philosophy comprises these concepts:

- Seiri, or organization (think “/sort/” in English). Knowing where things are—using approaches such as suitable naming—is crucial. You think naming identifiers isn’t important? Read on in the following chapters.

- Seiton, or tidiness (think “/systematize/” in English). There is an old American saying: A place for everything, and everything in its place. A piece of code should be where you expect to find it—and, if not, you should re-factor to get it there.

- Seiso, or cleaning (think “/shine/” in English): Keep the workplace free of hanging wires, grease, scraps, and waste. What do the authors here say about littering your code with comments and commented-out code lines that capture history or wishes for the future? Get rid of them.

- Seiketsu, or standardization: The group agrees about how to keep the workplace clean.

- Shutsuke, or discipline ( self-discipline). This means having the discipline to follow the practices and to frequently reflect on one’s work and be willing to change.

I think it’s important to note that the Danish wisdom advises us not just to pay attention to small things, but also to be  honest  in small things. This means being honest to the code, honest to our colleagues about the state of our code and, most of all, being honest with ourselves about our code.

Be prepared to work hard while reading this book. This is not a “feel good” book that you can read on an airplane and finish before you land. This book will make you work,  and work hard. What kind of work will you be doing? You’ll be reading code—lots of code.

*** Chapter 1. Clean Code


** The Linux Command Line

*** Bibtext reference 

#+BEGIN_SRC bibtex

@book{williamshottsjr.2012,
 Author = {William E. Shotts Jr.},
 title = {The Linux Command Line: A Complete Introduction},
 description = {The Linux Command Line: A Complete Introduction (Book, 2012)},
 publisher = {No Starch Press, Incorporated},
 interhash = {e28c39efbfbae594325b72cb5c52a1d3},
 intrahash = {fc00c4f75a45fb08e0441c83c7bcc2dd},
 year = {2012},
 month = {jan},
 isbn = {9781593273897},
 url = {https://www.xarg.org/ref/a/1593273894/}
}

#+END_SRC

*** Chapter 2
    
    - Changing current directory: _cd_
      
      - Absolute pathnames. Ex: _cd /usr/bin_

      - Relative pathnames. Ex: _cd ./directory inside current directory. cd ../directory into the current parent directory.

    - Important facts about file names

