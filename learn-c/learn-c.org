
#+TITLE: learn-c
#+AUTHOR: valro
#+DATE: 08/02/2020
;;#+STARTUP: showall 
--------------------------------------------------
C Programming: A Modern Approach    

   @book{king2008,
   AUTHOR = {K. N. KING},
   title = {C Programming: A Modern Approach, 2nd Edition},
   description = {C Programming: A Modern Approach, 2nd Edition (Book, 2008)},
   publisher = {W. W. Norton & Company},
   interhash = {cd0edbc77780700a9e48383807942677},
   intrahash = {7eac77c7a6942f002caf1afc6d23e181},
   year = {2008},
   month = {apr},
   isbn = {9780393979503},
   url = {https://www.directtextbook.com/isbn/9780393979503}
  }
--------------------------------------------------
* Expression Evaluation

A Partial List of C operators

|----------+---------------------+------------------+---------------|
| predence | Name                | Symbol(s)        | Associativity |
|----------+---------------------+------------------+---------------|
|        1 | increment (postfix) | ++               | left          |
|          | decrement (postfix) | --               |               |
|----------+---------------------+------------------+---------------|
|        2 | increment (prefix)  | ++               | right         |
|          | decrement (prefix)  | --               |               |
|          | unary plus          | +                |               |
|          | unary minus         | -                |               |
|----------+---------------------+------------------+---------------|
|        3 | multiplicative      | * / %            | left          |
|----------+---------------------+------------------+---------------|
|        4 | additive            | + -              | left          |
|----------+---------------------+------------------+---------------|
|        5 | assignment          | = *= /= %= += -= | right         |
|----------+---------------------+------------------+---------------|

This table (see Appendix A) has a variety of uses. Let's look one of these. 
Suppose that we run across a complicated expression such as:

#+BEGIN_SRC C
a = b += c++ - d + --e / -f
#+END_SRC
This expression would be easier to understand if there were parentheses
to show how the expression is constructed from subexpressions.
Steps:
 1. the operator with highest precedence is ++, used here as postfix, so we 
    put parentheses around ++ and its operand:
    #+BEGIN_SRC C
    a = b += (c++) - d + --e / -f;
    #+END_SRC
 2. Now we spot a prefix -- operator and a unary minus operator (both with
    predence 2)
    #+BEGIN_SRC C
    a = b += (c++) - d + (--e) / (-f); // The other minus is not a unary oper.
    #+END_SRC
 3. Next we note the / operator with predence 3.
    #+BEGIN_SRC C
    a = b += (c++) - d + ((--e) / (-f));
    #+END_SRC
 4. The expression contains two operators with predence 4, substraction
    and addition. Whenever two operators with the same predence are adjacent 
    to and operand, we've got to be careful about associativity. In this example,
    - and + are both adjacent to d, so associativity rules apply. The - and +
    operators group from left to right, so the parentheses go around the
    substraction first, then the addition.
    #+BEGIN_SRC C
    a = b += (((c++) - d) + ((--e) / (-f)));
    #+END_SRC
 5. The only remaining operators are = and +=. B oth operators are adjacent
    to b, so we must take associativity into account. Assigment opeators group
    from right to left, so parentheses go around the += expression first, then
    the = expression.
    #+BEGIN_SRC C
    (a = (b += (((c++) - d) + ((--e) / (-f)))));
    #+END_SRC
    The expression is now fully parenthesized.



* Chapter 7
** Exercises
*** Section 7.1
    1. Give thew decimal value of eaxch of the following integer constants:
       a) 077 ---> 7*8^0 + 7*8^1 --> 63
       b) 0x77---> 7*16^0 + 7*16^1 --> 119
       c) 0XABC ---> 10*16^2+11*16^1+12*16^0 ---> 2560+176+12 = 2748
       #+BEGIN_SRC C
       /* Give the value of each of the following integer constants.
        * (a) 077
        * (b) 0x77
        * (c) 0XABC
        */
        #include <stdio.h>

        int main(void)
        {
         printf("\nA: %d\n", 077);
         printf("B: %d\n", 0x77);
         printf("C: %d\n\n", 0XABC);
         return 0;
}

       #+END_SRC

       #+RESULTS:
       | A: |   63 |
       | B: |  119 |
       | C: | 2748 |

*** Section 7.2

    2. Which of the following are not legal constants in C? Classify each legal constant as either integer or floating-point.
       a) 010E2 ----> Integer
       b) 32.1E+5---> Floating-point
       c) 0790 -----> Not legal. 9 is not octal digit number.
       d) 100_000 --> Not legal. underscores are not legal.
       e) 3.978e-2--> Floating-point

       #+BEGIN_SRC C
       
       #include<stdio.h>
       int main (void) {

        printf("\na): %f\n", 0102E2);
        printf("b): %f\n", 32.1E+5);
        /* printf("c): %d", 0790); */
        /* printf("d): %f", 100_000); */
        printf("e): %f\n", 3.987e-2);
        
        return 0;
       }
       #+END_SRC

       #+RESULTS:
       | a): |   10200.0 |
       | b): | 3210000.0 |
       | e): |   0.03987 |
     3. Which of the following are not legal types in C:
	a) short unsigned int  
	b) short float           ---> Not legal
	c) long double           
	d) unsigned long         

        #+BEGIN_SRC C 
        #include <stdio.h>

        int main(void)
        {
          short unsigned int a;
          /* short float b; */
          long double c;
          unsigned long d;

          return 0;
         }

/* Answer:
 * A - legal
 * B - illegal
 * C - legal
 * D - legal
 */

        #+END_SRC

        #+RESULTS:

